/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
export class Utilities {
    /**
     * @param {?} arr
     * @return {?}
     */
    isNumberArray(arr) {
        return (arr && arr.length && arr.filter((value) => !isNaN(value)).length === arr.length) ? true : false;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isNullOrEmpty(obj) {
        return obj === undefined || obj === null || obj === '';
    }
    /**
     * @param {?} obj
     * @param {...?} allowedValues
     * @return {?}
     */
    toBoolean(obj, ...allowedValues) {
        return (obj === '' || obj === 'true' || allowedValues.indexOf(obj) !== -1) ? true : false;
    }
    /**
     * @param {?} n
     * @param {?} step
     * @return {?}
     */
    findNextValidStepValue(n, step) {
        const /** @type {?} */ divisorsSet1 = [];
        const /** @type {?} */ divisorsSet2 = [];
        const /** @type {?} */ sqrtNum = Math.sqrt(n);
        let /** @type {?} */ newStep = -1;
        for (let /** @type {?} */ i = 0; i < sqrtNum; i++) {
            if (n % i === 0) {
                if ((n / i) === i) {
                    divisorsSet1.push(i);
                }
                else {
                    divisorsSet1.push(i);
                    divisorsSet2.push(n / i);
                }
            }
        }
        // Picking newStep by checking large set of divisors first
        for (let /** @type {?} */ i = 0; i < divisorsSet2.length; i++) {
            if (step > divisorsSet2[i]) {
                newStep = divisorsSet2[i];
                break;
            }
        }
        if (newStep === -1) {
            // checking set of small divisors if newStep didn't find out till.
            for (let /** @type {?} */ i = divisorsSet1.length - 1; i >= 0; i--) {
                if (step > divisorsSet1[i]) {
                    newStep = divisorsSet1[i];
                    break;
                }
            }
        }
        return (newStep === -1) ? 1 : newStep;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbnBuLXNsaWRlci8iLCJzb3VyY2VzIjpbImxpYi91dGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdBLE1BQU07Ozs7O0lBRUcsYUFBYSxDQUFDLEdBQWE7UUFDaEMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7Ozs7O0lBRW5HLGFBQWEsQ0FBQyxHQUFRO1FBQzNCLE1BQU0sQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLEVBQUUsQ0FBQzs7Ozs7OztJQUVsRCxTQUFTLENBQUMsR0FBUSxFQUFFLEdBQUcsYUFBYTtRQUN6QyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxJQUFJLEdBQUcsS0FBSyxNQUFNLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7Ozs7OztJQUVyRixzQkFBc0IsQ0FBQyxDQUFTLEVBQUUsSUFBWTtRQUNuRCx1QkFBTSxZQUFZLEdBQWEsRUFBRSxDQUFDO1FBQ2xDLHVCQUFNLFlBQVksR0FBYSxFQUFFLENBQUM7UUFDbEMsdUJBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IscUJBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdEI7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ04sWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDckIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQzFCO2FBQ0Y7U0FDRjs7UUFFRCxHQUFHLENBQUMsQ0FBQyxxQkFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDN0MsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8sR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLEtBQUssQ0FBQzthQUNQO1NBQ0Y7UUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztZQUNuQixHQUFHLENBQUMsQ0FBQyxxQkFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNsRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0IsT0FBTyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDMUIsS0FBSyxDQUFDO2lCQUNQO2FBQ0Y7U0FDRjtRQUNELE1BQU0sQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQzs7Q0FFekMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbi8qVXRpbGl0aWVzICovXHJcbmV4cG9ydCBjbGFzcyBVdGlsaXRpZXMge1xyXG5cclxuICBwdWJsaWMgaXNOdW1iZXJBcnJheShhcnI6IG51bWJlcltdKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKGFyciAmJiBhcnIubGVuZ3RoICYmIGFyci5maWx0ZXIoKHZhbHVlKSA9PiAhaXNOYU4odmFsdWUpKS5sZW5ndGggPT09IGFyci5sZW5ndGgpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gIH1cclxuICBwdWJsaWMgaXNOdWxsT3JFbXB0eShvYmo6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbCB8fCBvYmogPT09ICcnO1xyXG4gIH1cclxuICBwdWJsaWMgdG9Cb29sZWFuKG9iajogYW55LCAuLi5hbGxvd2VkVmFsdWVzKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKG9iaiA9PT0gJycgfHwgb2JqID09PSAndHJ1ZScgfHwgYWxsb3dlZFZhbHVlcy5pbmRleE9mKG9iaikgIT09IC0xKSA/IHRydWUgOiBmYWxzZTtcclxuICB9XHJcbiAgcHVibGljIGZpbmROZXh0VmFsaWRTdGVwVmFsdWUobjogbnVtYmVyLCBzdGVwOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgZGl2aXNvcnNTZXQxOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgY29uc3QgZGl2aXNvcnNTZXQyOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgY29uc3Qgc3FydE51bSA9IE1hdGguc3FydChuKTtcclxuICAgIGxldCBuZXdTdGVwID0gLTE7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNxcnROdW07IGkrKykge1xyXG4gICAgICBpZiAobiAlIGkgPT09IDApIHtcclxuICAgICAgICBpZiAoKG4gLyBpKSA9PT0gaSkge1xyXG4gICAgICAgICAgZGl2aXNvcnNTZXQxLnB1c2goaSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGRpdmlzb3JzU2V0MS5wdXNoKGkpO1xyXG4gICAgICAgICAgZGl2aXNvcnNTZXQyLnB1c2gobiAvIGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gUGlja2luZyBuZXdTdGVwIGJ5IGNoZWNraW5nIGxhcmdlIHNldCBvZiBkaXZpc29ycyBmaXJzdFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXZpc29yc1NldDIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHN0ZXAgPiBkaXZpc29yc1NldDJbaV0pIHtcclxuICAgICAgICBuZXdTdGVwID0gZGl2aXNvcnNTZXQyW2ldO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobmV3U3RlcCA9PT0gLTEpIHsgLy8gY2hlY2tpbmcgc2V0IG9mIHNtYWxsIGRpdmlzb3JzIGlmIG5ld1N0ZXAgZGlkbid0IGZpbmQgb3V0IHRpbGwuXHJcbiAgICAgIGZvciAobGV0IGkgPSBkaXZpc29yc1NldDEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBpZiAoc3RlcCA+IGRpdmlzb3JzU2V0MVtpXSkge1xyXG4gICAgICAgICAgbmV3U3RlcCA9IGRpdmlzb3JzU2V0MVtpXTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChuZXdTdGVwID09PSAtMSkgPyAxIDogbmV3U3RlcDtcclxuICB9XHJcbn1cclxuIl19