import { Component, Input, Output, EventEmitter, ElementRef, HostListener, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Utilities {
    /**
     * @param {?} arr
     * @return {?}
     */
    isNumberArray(arr) {
        return (arr && arr.length && arr.filter((value) => !isNaN(value)).length === arr.length) ? true : false;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isNullOrEmpty(obj) {
        return obj === undefined || obj === null || obj === '';
    }
    /**
     * @param {?} obj
     * @param {...?} allowedValues
     * @return {?}
     */
    toBoolean(obj, ...allowedValues) {
        return (obj === '' || obj === 'true' || allowedValues.indexOf(obj) !== -1) ? true : false;
    }
    /**
     * @param {?} n
     * @param {?} step
     * @return {?}
     */
    findNextValidStepValue(n, step) {
        const /** @type {?} */ divisorsSet1 = [];
        const /** @type {?} */ divisorsSet2 = [];
        const /** @type {?} */ sqrtNum = Math.sqrt(n);
        let /** @type {?} */ newStep = -1;
        for (let /** @type {?} */ i = 0; i < sqrtNum; i++) {
            if (n % i === 0) {
                if ((n / i) === i) {
                    divisorsSet1.push(i);
                }
                else {
                    divisorsSet1.push(i);
                    divisorsSet2.push(n / i);
                }
            }
        }
        // Picking newStep by checking large set of divisors first
        for (let /** @type {?} */ i = 0; i < divisorsSet2.length; i++) {
            if (step > divisorsSet2[i]) {
                newStep = divisorsSet2[i];
                break;
            }
        }
        if (newStep === -1) {
            // checking set of small divisors if newStep didn't find out till.
            for (let /** @type {?} */ i = divisorsSet1.length - 1; i >= 0; i--) {
                if (step > divisorsSet1[i]) {
                    newStep = divisorsSet1[i];
                    break;
                }
            }
        }
        return (newStep === -1) ? 1 : newStep;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const SliderHandlerEnum = {
    left: 0,
    right: 1,
};
SliderHandlerEnum[SliderHandlerEnum.left] = "left";
SliderHandlerEnum[SliderHandlerEnum.right] = "right";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NpnSliderComponent extends Utilities {
    /**
     * @param {?} el
     */
    constructor(el) {
        super();
        this.el = el;
        this.sliderModel = [0, 0, 0];
        this.step = 1;
        this.sliderWidth = 0;
        this.totalDiff = 0;
        this.startClientX = 0;
        this.startPleft = 0;
        this.startPRight = 0;
        this.sliderInitiated = false;
        this.initValues = [];
        this.currentValues = [0, 0];
        this.handlerX = [0, 0];
        this.isHandlerActive = false;
        this.isTouchEventStart = false;
        this.isMouseEventStart = false;
        this.currentHandlerIndex = 0;
        this.stepIndicatorPositions = [];
        this.isDisabled = false;
        this.hideTooltip = false;
        this.hideValues = false;
        this.handlerIndex = SliderHandlerEnum;
        this.showStepIndicator = false;
        this.multiRange = true;
        this.onChange = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setMinValues(value) {
        if (!isNaN(value)) {
            this.minValue = Number(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setMaxValues(value) {
        if (!isNaN(value)) {
            this.maxValue = Number(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setMinSelectedValues(value) {
        if (!isNaN(value) && this.minSelected !== Number(value)) {
            this.minSelected = Number(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setMaxSelectedValues(value) {
        if (!isNaN(value) && this.maxSelected !== Number(value)) {
            this.maxSelected = Number(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set stepValue(value) {
        if (!isNaN(value)) {
            this.step = Number(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setHideTooltip(value) {
        this.hideTooltip = this.toBoolean(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setHideValues(value) {
        this.hideValues = this.toBoolean(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setDisabled(value) {
        this.isDisabled = this.toBoolean(value, 'disabled');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initializeSlider();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.sliderInitiated) {
            if (!this.isNullOrEmpty(changes["setMinSelectedValues"])
                && changes["setMinSelectedValues"].previousValue === changes["setMinSelectedValues"].currentValue) {
                return;
            }
            if (!this.isNullOrEmpty(changes["setMaxSelectedValues"])
                && changes["setMaxSelectedValues"].previousValue === changes["setMaxSelectedValues"].currentValue) {
                return;
            }
            this.resetModel();
        }
    }
    /**
     * @return {?}
     */
    initializeSlider() {
        try {
            // Taking width of slider bar element.
            this.sliderWidth = this.el.nativeElement.children[0].children[0].offsetWidth;
            this.resetModel();
            this.sliderInitiated = true;
        }
        catch (/** @type {?} */ e) {
            console.error(e);
        }
    }
    /**
     * @return {?}
     */
    resetModel() {
        this.validateSliderValues();
        // Setting the model values
        this.sliderModel = [
            this.currentValues[0] - this.initValues[0],
            this.currentValues[1] - this.currentValues[0],
            this.initValues[1] - this.currentValues[1]
        ];
        this.totalDiff = this.sliderModel.reduce((prevValue, curValue) => prevValue + curValue, 0);
        // Validation for slider step
        if (this.totalDiff % this.step !== 0) {
            const /** @type {?} */ newStep = this.findNextValidStepValue(this.totalDiff, this.step);
            console.warn('Invalid step value "' + this.step + '" : and took "' + newStep + '" as default step');
            this.step = newStep;
        }
        this.initializeStepIndicator();
        this.setHandlerPosition();
    }
    /**
     * @return {?}
     */
    validateSliderValues() {
        if (this.isNullOrEmpty(this.minValue) || this.isNullOrEmpty(this.maxValue)) {
            this.updateInitValues([0, 0]);
            this.updateCurrentValue([0, 0], true);
        }
        else if (this.minValue > this.maxValue) {
            this.updateInitValues([0, 0]);
            this.updateCurrentValue([0, 0], true);
        }
        else {
            this.initValues = [this.minValue, this.maxValue];
            /*
                  * Validation for Selected range values
                  */
            this.minSelected = this.isNullOrEmpty(this.minSelected) ? 0 : this.minSelected;
            this.maxSelected = this.isNullOrEmpty(this.maxSelected) ? 0 : this.maxSelected;
            if (this.minSelected < this.minValue || this.minSelected > this.maxValue) {
                this.minSelected = this.minValue;
            }
            if (this.maxSelected < this.minValue || this.maxSelected > this.maxValue) {
                this.maxSelected = this.maxValue;
            }
            if (this.minSelected > this.maxSelected) {
                this.minSelected = this.minValue;
                this.maxSelected = this.maxValue;
            }
            this.updateCurrentValue([this.minSelected, this.maxSelected], true);
        }
    }
    /**
     * @return {?}
     */
    initializeStepIndicator() {
        if (this.showStepIndicator) {
            this.stepIndicatorPositions.length = 0;
            const /** @type {?} */ numOfStepIndicators = this.totalDiff / this.step;
            if (this.sliderWidth / numOfStepIndicators >= 10) {
                const /** @type {?} */ increment = this.sliderWidth / numOfStepIndicators;
                let /** @type {?} */ leftPosition = increment;
                while (this.stepIndicatorPositions.length < numOfStepIndicators - 1) {
                    this.stepIndicatorPositions.push(+leftPosition.toFixed(2));
                    leftPosition += increment;
                }
            }
            else {
                console.warn(`As 'step' value is too small compared to min & max value difference and slider width,
          Step Indicator can't be displayed!. Provide slight large value for 'step'`);
            }
        }
        else {
            this.stepIndicatorPositions.length = 0;
        }
    }
    /**
     * @param {?} arrayValue
     * @param {?=} privateChange
     * @return {?}
     */
    updateCurrentValue(arrayValue, privateChange = false) {
        this.minSelected = this.currentValues[0] = arrayValue[0];
        this.maxSelected = this.currentValues[1] = arrayValue[1];
        if (!privateChange) {
            this.onChange.emit((this.multiRange) ? this.currentValues : [this.currentValues[0]]);
        }
    }
    /**
     * @param {?} arrayValue
     * @return {?}
     */
    updateInitValues(arrayValue) {
        this.minValue = this.initValues[0] = arrayValue[0];
        this.maxValue = this.initValues[1] = arrayValue[1];
    }
    /**
     * @return {?}
     */
    setHandlerPosition() {
        let /** @type {?} */ runningTotal = 0;
        // Updating selected values : current values
        this.updateCurrentValue([
            this.initValues[0] + this.sliderModel[0],
            this.initValues[1] - this.sliderModel[2]
        ]);
        /*Setting handler position */
        for (let /** @type {?} */ i = 0, /** @type {?} */ len = this.sliderModel.length - 1; i < len; i++) {
            runningTotal += this.sliderModel[i];
            this.handlerX[i] = (runningTotal / this.totalDiff) * 100;
        }
    }
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    setModelValue(index, value) {
        if (this.step > 1) {
            value = Math.round(value / this.step) * this.step;
        }
        this.sliderModel[index] = value;
    }
    /**
     * @return {?}
     */
    setHandlerActiveOff() {
        this.isMouseEventStart = false;
        this.isTouchEventStart = false;
        this.isHandlerActive = false;
    }
    /**
     * @param {?} event
     * @param {?} handlerIndex
     * @return {?}
     */
    setHandlerActive(event, handlerIndex) {
        event.preventDefault();
        if (!this.isDisabled) {
            if (!this.isNullOrEmpty(event.clientX)) {
                this.startClientX = event.clientX;
                this.isMouseEventStart = true;
                this.isTouchEventStart = false;
            }
            else if (!this.isNullOrEmpty(event.deltaX)) {
                this.startClientX = event.deltaX;
                this.isTouchEventStart = true;
                this.isMouseEventStart = false;
            }
            if (this.isMouseEventStart || this.isTouchEventStart) {
                this.currentHandlerIndex = handlerIndex;
                this.startPleft = this.sliderModel[handlerIndex];
                this.startPRight = this.sliderModel[handlerIndex + 1];
                this.isHandlerActive = true;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handlerSliding(event) {
        if ((this.isMouseEventStart && event.clientX) || (this.isTouchEventStart && event.deltaX)) {
            const /** @type {?} */ movedX = Math.round(((event.clientX || event.deltaX) - this.startClientX) / this.sliderWidth * this.totalDiff);
            const /** @type {?} */ nextPLeft = this.startPleft + movedX;
            const /** @type {?} */ nextPRight = this.startPRight - movedX;
            if (nextPLeft >= 0 && nextPRight >= 0) {
                this.setModelValue(this.currentHandlerIndex, nextPLeft);
                this.setModelValue(this.currentHandlerIndex + 1, nextPRight);
                this.setHandlerPosition();
            }
        }
    }
}
NpnSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'npn-slider',
                template: `<!--npn-slider template-->
<div class="slider" [class.disabled]="isDisabled">
  <div class="bar" (mousemove)="handlerSliding($event)" (panmove)="handlerSliding($event)">
    <span class="left-handle" [ngClass]="{'active': isHandlerActive && currentHandlerIndex === handlerIndex.left,
                      'last-active': currentHandlerIndex === handlerIndex.left
                    }"
      [style.left.%]="handlerX[handlerIndex.left]" (mousedown)="setHandlerActive($event, handlerIndex.left)" (panstart)="setHandlerActive($event, handlerIndex.left)">
      <span *ngIf="!hideTooltip" class="handle-tooltip">{{currentValues[handlerIndex.left]}}</span>
    </span>
    <div class="filler">
      <div class="step-indicators">
        <span *ngFor="let stepPos of stepIndicatorPositions" [style.left.px]="stepPos"></span>
      </div>
      <span *ngIf="multiRange" [style.left.%]="handlerX[0]" [style.width.%]="handlerX[handlerIndex.right] - handlerX[handlerIndex.left]"></span>
      <span *ngIf="!multiRange" [style.left.%]="0" [style.width.%]="handlerX[0]"></span>
    </div>
    <span *ngIf="multiRange" class="right-handle" [ngClass]="{'active': isHandlerActive && currentHandlerIndex === handlerIndex.right,
                      'last-active': currentHandlerIndex === handlerIndex.right
                    }"
      [style.left.%]="handlerX[handlerIndex.right]" (mousedown)="setHandlerActive($event, handlerIndex.right)"
      (panstart)="setHandlerActive($event, handlerIndex.right)">
      <span *ngIf="!hideTooltip" class="handle-tooltip">{{currentValues[handlerIndex.right]}}</span>
    </span>
  </div>
  <div class="values" *ngIf="!hideValues">
    <span>{{initValues[handlerIndex.left]}}</span>
    <span>{{initValues[handlerIndex.right]}}</span>
  </div>
</div>
`,
                styles: [`.slider,.slider *{box-sizing:border-box}.slider{display:block;width:100%;height:30px;padding:4px 10px;cursor:default;font-size:12px}.slider .bar{width:100%;background:#e8e8e8;height:10px;position:relative;border-radius:5px;box-shadow:inset 1px 1px 5px #bababa}.slider .bar>span.left-handle,.slider .bar>span.right-handle{display:inline-block;width:22px;height:22px;background:#bedcb2;border:7px solid #71b357;border-radius:50%;position:absolute;top:-7px;margin-left:-10px;z-index:1;cursor:pointer;transition:left .2s ease}.slider .bar>span.left-handle.last-active,.slider .bar>span.right-handle.last-active{z-index:2}.slider .bar>span.left-handle .handle-tooltip,.slider .bar>span.right-handle .handle-tooltip{display:block;position:absolute;top:-34px;left:-14px;border:1px solid #8fc37a;border-radius:4px;padding:1px 4px;min-width:20px;text-align:center;background:#d9ebd2;color:#71b357;font-weight:700;transition:opacity .2s ease;opacity:0}.slider .bar>span.left-handle .handle-tooltip:before,.slider .bar>span.right-handle .handle-tooltip:before{content:"";border:5px solid transparent;border-top-color:#8fc37a;position:absolute;top:104%;left:33%}.slider .bar>span.left-handle .handle-tooltip:after,.slider .bar>span.right-handle .handle-tooltip:after{content:"";border:5px solid transparent;border-top-color:#d9ebd2;position:absolute;top:100%;left:33%}.slider .bar>span.left-handle.active>.handle-tooltip,.slider .bar>span.left-handle:hover>.handle-tooltip,.slider .bar>span.right-handle.active>.handle-tooltip,.slider .bar>span.right-handle:hover>.handle-tooltip{opacity:1}.slider .bar div.filler{display:block;width:100%;height:100%;position:relative;overflow:hidden;border-radius:5px;border:1px solid #bedcb2}.slider .bar div.filler>span{display:inline-block;height:100%;position:absolute;top:0;background:#bedcb2;transition:all .2s ease}.slider .bar div.filler>div.step-indicators{width:100%;height:100%;position:relative}.slider .bar div.filler>div.step-indicators>span{width:1px;display:inline-block;height:10px;background:#71b357;position:absolute;left:0}.slider .values{display:block;font-weight:700;margin-top:4px;width:102%;margin-left:-1%;color:#908f90}.slider .values span:first-child{float:left}.slider .values span:last-child{float:right}.slider.disabled{opacity:.4}.slider.disabled .bar{box-shadow:none!important}.slider.disabled .bar>span.left-handle,.slider.disabled .bar>span.right-handle{cursor:not-allowed}.slider.disabled .bar>span.left-handle .handle-tooltip,.slider.disabled .bar>span.right-handle .handle-tooltip{display:none}`]
            },] },
];
/** @nocollapse */
NpnSliderComponent.ctorParameters = () => [
    { type: ElementRef }
];
NpnSliderComponent.propDecorators = {
    setMinValues: [{ type: Input, args: ['min',] }],
    setMaxValues: [{ type: Input, args: ['max',] }],
    setMinSelectedValues: [{ type: Input, args: ['minSelected',] }],
    setMaxSelectedValues: [{ type: Input, args: ['maxSelected',] }],
    stepValue: [{ type: Input, args: ['step',] }],
    showStepIndicator: [{ type: Input }],
    multiRange: [{ type: Input }],
    setHideTooltip: [{ type: Input, args: ['hide-tooltip',] }],
    setHideValues: [{ type: Input, args: ['hide-values',] }],
    setDisabled: [{ type: Input, args: ['disabled',] }],
    onChange: [{ type: Output }],
    setHandlerActiveOff: [{ type: HostListener, args: ['document:mouseup',] }, { type: HostListener, args: ['document:panend',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NpnSliderModule {
}
NpnSliderModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [NpnSliderComponent],
                exports: [NpnSliderComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NpnSliderComponent, NpnSliderModule, Utilities as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,