/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Utilities = /** @class */ (function () {
    function Utilities() {
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    Utilities.prototype.isNumberArray = /**
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        return (arr && arr.length && arr.filter(function (value) { return !isNaN(value); }).length === arr.length) ? true : false;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    Utilities.prototype.isNullOrEmpty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj === undefined || obj === null || obj === '';
    };
    /**
     * @param {?} obj
     * @param {...?} allowedValues
     * @return {?}
     */
    Utilities.prototype.toBoolean = /**
     * @param {?} obj
     * @param {...?} allowedValues
     * @return {?}
     */
    function (obj) {
        var allowedValues = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            allowedValues[_i - 1] = arguments[_i];
        }
        return (obj === '' || obj === 'true' || allowedValues.indexOf(obj) !== -1) ? true : false;
    };
    /**
     * @param {?} n
     * @param {?} step
     * @return {?}
     */
    Utilities.prototype.findNextValidStepValue = /**
     * @param {?} n
     * @param {?} step
     * @return {?}
     */
    function (n, step) {
        var /** @type {?} */ divisorsSet1 = [];
        var /** @type {?} */ divisorsSet2 = [];
        var /** @type {?} */ sqrtNum = Math.sqrt(n);
        var /** @type {?} */ newStep = -1;
        for (var /** @type {?} */ i = 0; i < sqrtNum; i++) {
            if (n % i === 0) {
                if ((n / i) === i) {
                    divisorsSet1.push(i);
                }
                else {
                    divisorsSet1.push(i);
                    divisorsSet2.push(n / i);
                }
            }
        }
        // Picking newStep by checking large set of divisors first
        for (var /** @type {?} */ i = 0; i < divisorsSet2.length; i++) {
            if (step > divisorsSet2[i]) {
                newStep = divisorsSet2[i];
                break;
            }
        }
        if (newStep === -1) {
            // checking set of small divisors if newStep didn't find out till.
            for (var /** @type {?} */ i = divisorsSet1.length - 1; i >= 0; i--) {
                if (step > divisorsSet1[i]) {
                    newStep = divisorsSet1[i];
                    break;
                }
            }
        }
        return (newStep === -1) ? 1 : newStep;
    };
    return Utilities;
}());
export { Utilities };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbnBuLXNsaWRlci8iLCJzb3VyY2VzIjpbImxpYi91dGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdBLElBQUE7Ozs7Ozs7SUFFUyxpQ0FBYTs7OztjQUFDLEdBQWE7UUFDaEMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFiLENBQWEsQ0FBQyxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDOzs7Ozs7SUFFbkcsaUNBQWE7Ozs7Y0FBQyxHQUFRO1FBQzNCLE1BQU0sQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLEVBQUUsQ0FBQzs7Ozs7OztJQUVsRCw2QkFBUzs7Ozs7Y0FBQyxHQUFRO1FBQUUsdUJBQWdCO2FBQWhCLFVBQWdCLEVBQWhCLHFCQUFnQixFQUFoQixJQUFnQjtZQUFoQixzQ0FBZ0I7O1FBQ3pDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksR0FBRyxLQUFLLE1BQU0sSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDOzs7Ozs7O0lBRXJGLDBDQUFzQjs7Ozs7Y0FBQyxDQUFTLEVBQUUsSUFBWTtRQUNuRCxxQkFBTSxZQUFZLEdBQWEsRUFBRSxDQUFDO1FBQ2xDLHFCQUFNLFlBQVksR0FBYSxFQUFFLENBQUM7UUFDbEMscUJBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IscUJBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdEI7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ04sWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDckIsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQzFCO2FBQ0Y7U0FDRjs7UUFFRCxHQUFHLENBQUMsQ0FBQyxxQkFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDN0MsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8sR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLEtBQUssQ0FBQzthQUNQO1NBQ0Y7UUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztZQUNuQixHQUFHLENBQUMsQ0FBQyxxQkFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNsRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0IsT0FBTyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDMUIsS0FBSyxDQUFDO2lCQUNQO2FBQ0Y7U0FDRjtRQUNELE1BQU0sQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQzs7b0JBNUMxQztJQThDQyxDQUFBO0FBM0NELHFCQTJDQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuLypVdGlsaXRpZXMgKi9cclxuZXhwb3J0IGNsYXNzIFV0aWxpdGllcyB7XHJcblxyXG4gIHB1YmxpYyBpc051bWJlckFycmF5KGFycjogbnVtYmVyW10pOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoYXJyICYmIGFyci5sZW5ndGggJiYgYXJyLmZpbHRlcigodmFsdWUpID0+ICFpc05hTih2YWx1ZSkpLmxlbmd0aCA9PT0gYXJyLmxlbmd0aCkgPyB0cnVlIDogZmFsc2U7XHJcbiAgfVxyXG4gIHB1YmxpYyBpc051bGxPckVtcHR5KG9iajogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsIHx8IG9iaiA9PT0gJyc7XHJcbiAgfVxyXG4gIHB1YmxpYyB0b0Jvb2xlYW4ob2JqOiBhbnksIC4uLmFsbG93ZWRWYWx1ZXMpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAob2JqID09PSAnJyB8fCBvYmogPT09ICd0cnVlJyB8fCBhbGxvd2VkVmFsdWVzLmluZGV4T2Yob2JqKSAhPT0gLTEpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gIH1cclxuICBwdWJsaWMgZmluZE5leHRWYWxpZFN0ZXBWYWx1ZShuOiBudW1iZXIsIHN0ZXA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBkaXZpc29yc1NldDE6IG51bWJlcltdID0gW107XHJcbiAgICBjb25zdCBkaXZpc29yc1NldDI6IG51bWJlcltdID0gW107XHJcbiAgICBjb25zdCBzcXJ0TnVtID0gTWF0aC5zcXJ0KG4pO1xyXG4gICAgbGV0IG5ld1N0ZXAgPSAtMTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3FydE51bTsgaSsrKSB7XHJcbiAgICAgIGlmIChuICUgaSA9PT0gMCkge1xyXG4gICAgICAgIGlmICgobiAvIGkpID09PSBpKSB7XHJcbiAgICAgICAgICBkaXZpc29yc1NldDEucHVzaChpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZGl2aXNvcnNTZXQxLnB1c2goaSk7XHJcbiAgICAgICAgICBkaXZpc29yc1NldDIucHVzaChuIC8gaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBQaWNraW5nIG5ld1N0ZXAgYnkgY2hlY2tpbmcgbGFyZ2Ugc2V0IG9mIGRpdmlzb3JzIGZpcnN0XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpdmlzb3JzU2V0Mi5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoc3RlcCA+IGRpdmlzb3JzU2V0MltpXSkge1xyXG4gICAgICAgIG5ld1N0ZXAgPSBkaXZpc29yc1NldDJbaV07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChuZXdTdGVwID09PSAtMSkgeyAvLyBjaGVja2luZyBzZXQgb2Ygc21hbGwgZGl2aXNvcnMgaWYgbmV3U3RlcCBkaWRuJ3QgZmluZCBvdXQgdGlsbC5cclxuICAgICAgZm9yIChsZXQgaSA9IGRpdmlzb3JzU2V0MS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIGlmIChzdGVwID4gZGl2aXNvcnNTZXQxW2ldKSB7XHJcbiAgICAgICAgICBuZXdTdGVwID0gZGl2aXNvcnNTZXQxW2ldO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKG5ld1N0ZXAgPT09IC0xKSA/IDEgOiBuZXdTdGVwO1xyXG4gIH1cclxufVxyXG4iXX0=