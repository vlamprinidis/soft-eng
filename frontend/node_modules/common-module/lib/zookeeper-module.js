/**
 * Created by cathy on 2017/7/28.
 */
//var commonModule = require('common-module');
//var config = require('./config/config.js');
//var bunyanRedisClient = commonModule.bunyanRedisClient(config.bunyan_redis);
var zk;
var callBackFunc = {};
var zookeeperNodeData = {};
var bunyanRedisClient;
var options = function (opts) {
    if (opts.zk && !isEmptyObject(opts.zk)) {
        zk = opts.zk;
    } else {
        bunyanRedisClient.error('opts must has zookeeper Object');
        //console.log('opts must has zookeeper Object');
    }
    bunyanRedisClient = opts.logger;
    callBackFunc['dataChange'] = opts.dataChange || '';
    callBackFunc['nodeDel'] = opts.nodeDel || '';
    callBackFunc['addNewNode'] = opts.addNewNode || '';
};
function init(zooNodeName) {
    return new Promise((resolve, reject) => {
        getRootNodeJSON(zooNodeName, zookeeperNodeData).then(function (data) {
            resolve(data);
        }).catch((e) => {
            bunyanRedisClient.error(e);
           // console.log(e);
        });
    }).then((datas) => {
        return new Promise((resolve, reject) => {
            zookeeperNodeData = getParentNodeData(zooNodeName, datas)
            resolve(zookeeperNodeData);
        })
    }).catch((e) => {
        bunyanRedisClient.error(e);
        //console.log(e);
    });
}
function getParentNodeData(zooNodeName, data) {
    try {
        if (zooNodeName != '/' && zooNodeName.length > 1) {
            var delZooString = zooNodeName.substr(1, zooNodeName.length);
            var zooArray = delZooString.split('/');
            var len = zooArray.length;
            if (len > 0) {
                zooArray.pop();
                zooArray.reverse();
                var obj = data;
                zooArray.reduce((_obj, node) => {
                    _obj[node] = obj;
                    _obj[node]['value'] = '';
                    obj = _obj;
                    return {};
                }, { });
                return obj;
            }
        }
    } catch (e) {
        bunyanRedisClient.error(e);
       // console.log(e);
    }
}
function getRootNodeJSON(zooNodeName, zookeeperJSONData) {
    return new Promise((resolve, reject) => {
        if (zooNodeName != '/' && zooNodeName.length > 1) {
            if (!zookeeperJSONData) {
                zookeeperJSONData = zookeeperNodeData;
            }
            var delZooString = zooNodeName.substr(1, zooNodeName.length);
            var zooArray = delZooString.split('/');
            var len = zooArray.length;
            if (len !== 0) {
                var nodeName = zooArray[len - 1];
                zookeeperJSONData[nodeName] = {};
                listenChildren(zooNodeName, zookeeperJSONData[nodeName]).then(() => {
                    resolve(zookeeperNodeData);
                }).catch((e) => {
                    //console.log(e);
                    bunyanRedisClient.error(e);
                });
            }
        } else {
            bunyanRedisClient.error('节点不能为/，且长度必须大于1');
            //console.log('节点不能为/，且长度必须大于1');
        }
    });
}
function isEmptyObject(obj) {
    for (var name in obj) {
        return false;//返回false，不为空对象
    }
    return true;//返回true，为空对象
}
function listenChildrenPromise(nodeName, zookeeperJSONData, callback) {
    zk.zk.getChildren(nodeName,
        (event) => {
        if (event.name == 'NODE_DELETED') {
            getNode(event.path, zookeeperNodeData);
            if (callBackFunc.nodeDel && typeof (callBackFunc.nodeDel) === 'function') {
                callBackFunc.nodeDel(event);
            }
        }
        if (event.name == 'NODE_CHILDREN_CHANGED') {
            listenChildren(nodeName, zookeeperJSONData).then(()=> {
                if (callBackFunc.addNewNode && typeof (callBackFunc.addNewNode) === 'function') {
                    callBackFunc.addNewNode(event);
                }
            });
         }
      }
      ,(err, children, stat) => {
            if (err) {
                bunyanRedisClient.error(err.stack);
                // console.log(err.stack);
                return;
            } 
            else {
                callback(children);
             }
        });
}
function listenChildren(nodeName, zookeeperJSONData) {
    return new Promise((resolve1, reject) => {
        listenChildrenPromise(nodeName, zookeeperJSONData, (children) => {
        resolve1(children);
    });
    }).then((children) => {
        return new Promise((resolve2, reject) => {
        watcherNodeData(nodeName, (value) => {
        resolve2(value);
    })
    }).then((value) => {
        var flag = isEmptyObject(zookeeperJSONData);
        if (flag) {
        zookeeperJSONData['value'] = value;
        return Promise.all(
            children.map(function (obj) {
            return new Promise(function (resolve3, reject) {
                watcherNodeData(nodeName + '/' + obj, function (value) {
                    resolve3(value);
                })
            }).then(function (value) {
                    zookeeperJSONData[obj] = {};
                    zookeeperJSONData[obj]['value'] = value;
                    return listenChildren(nodeName + '/' + obj, zookeeperJSONData[obj]);
                }).catch((e) => {
                 //console.log(e);
                bunyanRedisClient.error(e);
                  });
                })
            );
    } else {
        var key = '';
        for (var obj2 in zookeeperJSONData) {
           key = obj2;
        }
            if (key == 'value') {
                return Promise.all(
                    children.map(function (obj3) {
                    return new Promise((resolve4, reject) => {
                        watcherNodeData(nodeName + '/' + obj3, (value) => {
                           resolve4(value);
                        })
                        }).then((value) => {
                            zookeeperJSONData[obj3] = {};
                            zookeeperJSONData[obj3]['value'] = value;
                            return listenChildren(nodeName + '/' + obj3, zookeeperJSONData[obj3]);
                        }).catch((e) => {
                        // console.log(e);
                            bunyanRedisClient.error(e);
                        });
                    })
                )
            }
            else {
            var newNode = '';
            var flag1 = false;//新添加的子节点
            children.forEach(function (obj2) {
                flag1 = false;
                for (var obj1 in zookeeperJSONData) {
                    if (obj1 != 'value') {
                        if (obj1 == obj2) {
                            flag1 = true;
                        }
                    }
                }
                if (!flag1) {
                newNode = obj2;
                }
            });
            if (newNode != '') {
                return new Promise((resolve5, reject) => {
                    watcherNodeData(nodeName + '/' + newNode, (value) => {
                        resolve5(value);
                    })
                    }).then((value) => {
                        zookeeperJSONData[newNode] = {};
                        zookeeperJSONData[newNode]['value'] = value;
                        return listenChildren(nodeName + '/' + newNode, zookeeperJSONData[newNode]);
                }).catch((e) => {
                //console.log(e);
                    bunyanRedisClient.error(e);
                });
             }
           }
         }
        }).catch((e) => {
        //console.log(e);
            bunyanRedisClient.error(e);
        });
        }).catch((e) => {
        //console.log(e);
            bunyanRedisClient.error(e);
        });
}
function getNode(nodeName, zookeeperJSONData, value) {
    try {
        var nodeArray = nodeName.substr(1, nodeName.length).split('/');
        if (nodeArray.length > 1) {
            nodeArray.forEach(function (obj1) {
            for (var obj in zookeeperJSONData) {
            if (obj1 == obj) {
                nodeArray.shift();
                getNode('/' + nodeArray.join('/'), zookeeperJSONData[obj], value);
                }
            }
        });
        } else if (nodeArray.length == 1) {
            if (value) {
                zookeeperJSONData[nodeArray[0]]['value'] = value;
                return;
            } else {
                delete zookeeperJSONData[nodeArray[0]];
                return;
            }
        }
    } catch (e) {
        //console.log(e);
        bunyanRedisClient.error(e);
        }
}
function addTreeNode(nodeName) {
    return new Promise( (resolve, reject) =>{
        watcherNodeData(nodeName,  (value) =>{
        resolve(value);
    });
    }).then( (value)=> {
        getNode(nodeName, zookeeperNodeData, value);
    });
}
function watcherNodeData(nodeName, callback) {
    zk.zk.getData(nodeName,  (event) =>{
        if (event.name == 'NODE_DATA_CHANGED') {
            addTreeNode(nodeName);
        if (callBackFunc.dataChange && typeof (callBackFunc.dataChange) === 'function') {
            callBackFunc.dataChange(event);
              }
          }
        },(err, value, stat)=> {
        if (err) {
            bunyanRedisClient.error(e);
            // console.log(err);
        } else {
            var val = (value ? value.toString('UTF-8') : '');
            callback(val);
        }
    });
}
module.exports = { init: init, options: options };