(function () {
    
    "use strict";
    
    var soap = require('./soap');
    var _ = require('underscore');
    var wcfObj = {};
    
    var objectFilter = function (obj) {
        //delete data type for array data,
        var self = this;
        var parts;
        if (Array.isArray(obj)) {
            var i, n;
            parts = [];
            for (i = 0, n = obj.length; i < n; i++) {
                var item = obj[i];
                parts.push(objectFilter(item));
            }
        }
        else if (typeof obj == 'object') {
            parts = {};
            for (var name in obj) {
                if (!obj.hasOwnProperty(name)) continue;
                var child = obj[name];
                if (typeof child == 'undefined')
                    continue;
                if (Array.isArray(child))
                    return objectFilter(child);
                else
                    parts[name] = objectFilter(child);
            }
        }
        else if (obj !== undefined) {
            parts = obj;
        }
        return parts;
    };
    
    var createClient = function (name, url, callback) {
        try {
            soap.createClient(url, function (err, client) {
                if (!err) {
                    wcfObj[name] = client;
                }
                callback(err, client);
            });
        }
        catch (ex) {
            callback(ex);
        }
    }
    
    exports.request = function (serviceName, namespaceAttr, param, method, callback) {
        try {
            var args = _.extend(namespaceAttr, param);
            var client = wcfObj[serviceName];
            client[method](args, function (err, result, body) {
                if (err) {
                    callback(err);
                }
                else {
                    result = objectFilter(result);
                    if (result.hasOwnProperty(method + "Result"))
                        callback(err, result[method + "Result"], body);
                    else {
                        callback(err, result, body);
                    }
                }
            });
        }
        catch (ex) {
            callback(ex);
        }
    };
    
    exports.loadWcfService = function (options, callback) {
        for (var key in options) {
            createClient(options[key].name, options[key].url, function (err, client) {
                if (err)
                    callback(err);
            });
        }
        callback();
    };
    
    exports.reloadWcfService = function (option, method, param, namespaceAttr, callback) {
        soap.createClient(option.url, function (err, client) {
            if (err)
                callback(err);
            else {
                wcfObj[option.name] = client;
                var args = _.extend(namespaceAttr, param);
                client[method](args, function (err, result, body) {
                    if (err) {
                        callback(err);
                    }
                    else {
                        result = objectFilter(result);
                        if (result.hasOwnProperty(method + "Result"))
                            callback(err, result[method + "Result"], body);
                        else {
                            callback(err, result, body);
                        }
                    }
                });
            }
        });
    };
})();